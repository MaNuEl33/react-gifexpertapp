{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAAP,GACtBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCWLO,EATK,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC3B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,4BAAKA,QCgBFO,EAlBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDbyBK,CAAa1B,GAAtCoB,EAAP,EAAOA,QAAcP,EAArB,EAAgBN,KAEhB,OAAQ,qCACJ,oBAAIS,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SACMH,EAAOJ,KAAI,SAAAkB,GAAK,OACd,cAAC,EAAD,eAEQA,GADGA,EAAMhB,aEOlBiB,EAjBM,WACjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OAAQ,qCACJ,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQS,EAAWe,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAA2BA,SAAWA,GAAtBA,Y,MCTpC6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.440e9946.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categories => [inputValue, ...categories])\r\n            setInputValue('')\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\" \r\n                value={ inputValue }\r\n                onChange= { handleInputChange }\r\n            />\r\n        </form>        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=x087J2Jlvbtma0uQgWg3GDk78aIlCIuq`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ( { title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt= { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ category }) => {\r\n    \r\n    const {loading, data:images } = useFetchGifs(category)\r\n\r\n    return (<>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n        <div className=\"card-grid\">\r\n            { images.map(image => \r\n                <GifGridItem\r\n                    key= { image.id }\r\n                    {...image}\r\n                />\r\n            ) }\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default GifGrid\r\n","import { getGifs } from \"../helpers/getGifs\"\r\nimport { useState, useEffect } from 'react'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch'])    \r\n\r\n    return (<>\r\n        <h2>GifExpertApp</h2>\r\n        <hr />\r\n        <AddCategory setCategories={ setCategories }/>\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid key= { category } category={ category }/>\r\n                ))\r\n            }\r\n        </ol>\r\n    </>)\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));"],"sourceRoot":""}